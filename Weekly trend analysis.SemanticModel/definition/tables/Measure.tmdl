table Measure
	lineageTag: a4ee171d-ceaa-4bb5-af9b-d5ed8fec8403

	measure TotalProduction = ```
			(SUM(Weekly_Productions[Production (Thousand Barrels per Day)]))
			
			```
		lineageTag: 4e3c0507-c038-4207-a136-5065e602572b

		annotation PBI_FormatHint = {"isGeneralNumber":true}

	measure '26 Week Moving Average' = ```
			
			CALCULATE(
			    AVERAGEX(
			        DATESINPERIOD(
			            CalendarTable[Date], 
			            MAX(CalendarTable[Date]),
			            -182, 
			        DAY 
			        ),
			        SUM(Weekly_Productions[Production (Thousand Barrels per Day)])
			    ),
			    CalendarTable[Date] >= DATE(1996, 1, 1) && CalendarTable[Date] <= DATE(2023, 12, 31)
			)
			
			```
		lineageTag: 23a79719-a96d-4130-86d9-04c53b58f97b

		annotation PBI_FormatHint = {"isGeneralNumber":true}

	measure Recent4WeeksProduction = ```
			
			CALCULATE(
			    SUM(Weekly_Productions[Production (Thousand Barrels per Day)]),
			    FILTER(
			        Weekly_Productions,
			        Weekly_Productions[Date] IN 
			        TOPN(
			            4, 
			            VALUES(Weekly_Productions[Date]), 
			            Weekly_Productions[Date], 
			            DESC
			        )
			    )
			)
			```
		formatString: 0
		lineageTag: e11f3101-1719-483e-9d53-b9e5aae8449b

	measure 'WoW Change' = ```
			
			VAR CurrentProduction = SUM(Weekly_Productions[Production (Thousand Barrels per Day)])
			VAR PreviousWeekProduction = 
			    CALCULATE(
			        SUM(Weekly_Productions[Production (Thousand Barrels per Day)]), 
			        DATEADD(Weekly_Productions[Date], -7, DAY)
			    )
			VAR ChangeValue = CurrentProduction - PreviousWeekProduction
			RETURN 
			    IF(
			        ISBLANK(PreviousWeekProduction),
			        BLANK(),
			        ChangeValue
			    )
			
			```
		lineageTag: 6eb0617b-c36a-4e7f-a8f8-9fbbe85a8c76

		annotation PBI_FormatHint = {"isGeneralNumber":true}

	measure 'YoY Change' = ```
			
			VAR CurrentWeekNumber = 
			    WEEKNUM(MAX(Weekly_Productions[Date]), 21)  
			VAR CurrentYear = YEAR(MAX(Weekly_Productions[Date]))  
			VAR CurrentProduction = 
			    CALCULATE(
			        SUM(Weekly_Productions[Production (Thousand Barrels per Day)]),
			        YEAR(Weekly_Productions[Date]) = CurrentYear &&
			        WEEKNUM(Weekly_Productions[Date], 21) = CurrentWeekNumber  
			    )
			VAR Previous_Year = CurrentYear - 1  
			VAR PreviousYearProduction = 
			    CALCULATE(
			        SUM(Weekly_Productions[Production (Thousand Barrels per Day)]),
			        YEAR(Weekly_Productions[Date]) = Previous_Year &&
			        WEEKNUM(Weekly_Productions[Date], 21) = CurrentWeekNumber  
			    )
			RETURN 
			    IF(
			        ISBLANK(PreviousYearProduction),
			        0,  
			        CurrentProduction - PreviousYearProduction  
			    )
			
			```
		lineageTag: dc395a02-b01e-4984-b404-4530a48d2b92

		annotation PBI_FormatHint = {"isGeneralNumber":true}

	measure 'WoW Change (%)' = ```
			
			VAR CurrentProduction = SUM(Weekly_Productions[Production (Thousand Barrels per Day)])
			VAR PreviousWeekProduction = 
			    CALCULATE(
			        SUM(Weekly_Productions[Production (Thousand Barrels per Day)]), 
			        DATEADD(Weekly_Productions[Date], -7, DAY)
			    )
			VAR ChangeValue = CurrentProduction - PreviousWeekProduction
			RETURN 
			    IF(
			        ISBLANK(PreviousWeekProduction),
			        BLANK(),
			        DIVIDE(ChangeValue, PreviousWeekProduction, 0) 
			    )
			
			```
		formatString: 0.00%;-0.00%;0.00%
		lineageTag: 1f8103da-dfcd-4512-a3ed-ac6ab1cf9f94

	measure 'YoY Change (%)' = ```
			
			VAR CurrentWeekNumber = 
			    WEEKNUM(MAX(Weekly_Productions[Date]), 21)  // Use 21 for Friday as the first day of the week
			VAR CurrentYear = YEAR(MAX(Weekly_Productions[Date]))
			VAR CurrentProduction = 
			    CALCULATE(
			        SUM(Weekly_Productions[Production (Thousand Barrels per Day)]),
			        YEAR(Weekly_Productions[Date]) = CurrentYear &&
			        WEEKNUM(Weekly_Productions[Date], 21) = CurrentWeekNumber
			    )
			VAR Previous_Year = CurrentYear - 1
			VAR PreviousYearProduction = 
			    CALCULATE(
			        SUM(Weekly_Productions[Production (Thousand Barrels per Day)]),
			        YEAR(Weekly_Productions[Date]) = Previous_Year &&
			        WEEKNUM(Weekly_Productions[Date], 21) = CurrentWeekNumber
			    )
			VAR ChangeValue = CurrentProduction - PreviousYearProduction
			RETURN 
			    IF(
			        ISBLANK(PreviousYearProduction) || PreviousYearProduction = 0,
			        BLANK(),  // Avoid division by zero
			        DIVIDE(ChangeValue, PreviousYearProduction)   // Calculate percentage
			    )
			
			```
		formatString: 0.00%;-0.00%;0.00%
		lineageTag: 800e52a3-e1ee-4694-bcca-ceb820fffb39

	measure '26-Week Moving Average' = ```
			
			AVERAGEX(
			    DATESINPERIOD(
			        Weekly_Productions[Date], 
			        MAX(Weekly_Productions[Date]), 
			        -26, 
			        DAY
			    ),
			    CALCULATE(SUM(Weekly_Productions[Production (Thousand Barrels per Day)]))
			)
			
			```
		lineageTag: 55f37d9a-1d93-48bf-a0f9-a337f89003a3

		annotation PBI_FormatHint = {"isGeneralNumber":true}

	measure CurrentYearProduction =
			
			CALCULATE(
			    SUM(Weekly_Productions[Production (Thousand Barrels per Day)]) / 1000,
			    FILTER(
			        Weekly_Productions,
			        YEAR(Weekly_Productions[Date]) = YEAR(TODAY())
			    )
			)
		lineageTag: 5b21af3a-5db5-49a9-ac41-e4b5646876e4

		annotation PBI_FormatHint = {"isGeneralNumber":true}

	measure LastYearProduction =
			
			CALCULATE(
			    SUM(Weekly_Productions[Production (Thousand Barrels per Day)]) / 1000,
			    FILTER(
			        Weekly_Productions,
			        YEAR(Weekly_Productions[Date]) = YEAR(TODAY()) - 1
			    )
			)
		formatString: 0
		lineageTag: dcba6e5e-8597-49c6-be19-9525cad7d6be

	measure SecondLastYearProduction =
			
			CALCULATE(
			    SUM(Weekly_Productions[Production (Thousand Barrels per Day)]) / 1000,
			    FILTER(
			        Weekly_Productions,
			        YEAR(Weekly_Productions[Date]) = YEAR(TODAY()) - 2
			    )
			)
		lineageTag: 53b38b33-2f5e-4536-bfa4-39af9ff68c09

		annotation PBI_FormatHint = {"isGeneralNumber":true}

	measure Weekly_Avg_MultiYear = ```
			
			AVERAGEX(
			    SUMMARIZE(
			        FILTER(
			            Weekly_Productions,
			            YEAR(Weekly_Productions[Date]) IN {2019, 2020, 2021, 2022, 2023}
			        ),
			        Weekly_Productions[WeekNum],           -- Group by week number
			        "WeeklyProduction",
			        AVERAGE(Weekly_Productions[Production (Thousand Barrels per Day)])/1000  -- Average production for each week
			    ),
			    [WeeklyProduction]  -- Return the average of the weekly production across the years
			)
			
			```
		lineageTag: f6662c10-ff27-4be8-8608-cb45eb8118ff

		annotation PBI_FormatHint = {"isGeneralNumber":true}

	measure Weekly_Max_MultiYear = ```
			
			MAXX(
			    SUMMARIZE(
			        FILTER(
			            Weekly_Productions,
			            YEAR(Weekly_Productions[Date]) IN {2019, 2020, 2021, 2022, 2023}
			        ),
			        Weekly_Productions[WeekNum],
			        "WeeklyProduction",
			        MAX(Weekly_Productions[Production (Thousand Barrels per Day)])/1000  -- Max production for each week
			    ),
			    [WeeklyProduction]  -- Return the max of the weekly production across the years
			)
			
			```
		lineageTag: b9967d63-0084-453e-bb56-5e82dd08b109

		annotation PBI_FormatHint = {"isGeneralNumber":true}

	measure Weekly_Min_MultiYear =
			
			MINX(
			    SUMMARIZE(
			        FILTER(
			            Weekly_Productions,
			            YEAR(Weekly_Productions[Date]) IN {2019, 2020, 2021, 2022, 2023}
			        ),
			        Weekly_Productions[WeekNum],
			        "WeeklyProduction",
			        MIN(Weekly_Productions[Production (Thousand Barrels per Day)])/1000  -- Min production for each week
			    ),
			    [WeeklyProduction]  -- Return the min of the weekly production across the years
			)
		lineageTag: ecf61ad8-d0c6-49f4-a398-d2877e134055

		annotation PBI_FormatHint = {"isGeneralNumber":true}

	partition Measure = m
		mode: import
		source =
				let
				    Source = Table.FromRows(Json.Document(Binary.Decompress(Binary.FromText("i44FAA==", BinaryEncoding.Base64), Compression.Deflate)), let _t = ((type nullable text) meta [Serialized.Text = true]) in type table [Column1 = _t]),
				    #"Changed Type" = Table.TransformColumnTypes(Source,{{"Column1", type text}}),
				    #"Removed Columns" = Table.RemoveColumns(#"Changed Type",{"Column1"})
				in
				    #"Removed Columns"

	annotation PBI_ResultType = Table

